package problemComponents;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;

import compositeFeatureDistanceStrategies.CompositeDistanceStrategy;
import exampleDistanceCombinationStrategies.EuclidianDistance;
import exampleDistanceCombinationStrategies.ExampleDistanceStrategy;
import simpleFeatureDistanceStrategies.SimpleDistanceStrategy;

/**
 * Object containing all information on a prediction problem. Contains all test and training example, 
 * field names, weightings for fields, prediction accuracy values, and strategies for combining exaples
 * for prediction.
 * 
 * This class has methods for accessing and editing each of the above fields, as well as methods for
 * saving to/reading from a file
 * 
 * @author Luke Newton
 */
public class Problem implements Serializable{
	//autogenerated serialization ID for saving object to a file
	private static final long serialVersionUID = -3429170813542102994L;
	//collection of field names in the same order they appear in data points
	private ArrayList<String> fieldNames;
	//collection weightings for each field in the same order they appear in data points
	private double[] weights;
	//the number of fields in each data point
	private int numberOfFields;
	//object which keeps track of prediction accuracy
	private PredictionError predictionError;
	//all data points with an unknown value to be predicted
	private ArrayList<TestExample> testExamples;
	//all known data points for use in predicting test example values
	private ArrayList<TrainingExample> trainingExamples;
	//strategy used to combine the distances for each field in a training example
	private ExampleDistanceStrategy exampleCombinationStrategy;
	//file name of the file used to save/load a probkem from
	private static final String FILENAMESERIALIZED = "problemSerialized.txt";
	
	/**
	 * Constructor for a generic problem
	 * 
	 * @param numFields the number of fields in each data point
	 */
	public Problem(int numFields){
		numberOfFields = numFields;
		predictionError = new PredictionError();
		testExamples = new ArrayList<>();
		trainingExamples = new ArrayList<>();
		fieldNames = new ArrayList<>();
		weights = new double[numFields];
		exampleCombinationStrategy = new EuclidianDistance();
	}

	/**
	 * Constructor for a problem with specified field names and
	 * no initial data points
	 * 
	 * @param numFields the number of fields in each data point
	 * @param fieldNames collection of the name of each field in a data point in the order they appear
	 */
	public Problem(int numFields, ArrayList<String> fieldNames){
		this(numFields);
		this.fieldNames = fieldNames;
	}
	
	/**
	 * Constructor for a problem with specified field names and
	 * no initial data points
	 * 
	 * @param numFields the number of fields in each data point
	 * @param fieldNames collection of the name of each field in a data point in the order they appear
	 */
	public Problem(int numFields, ArrayList<String> fieldNames, double[] weights){
		this(numFields, fieldNames);
		this.weights = weights;
	}
	
	public void setStrategies(ExampleDistanceStrategy exStrat, CompositeDistanceStrategy compStrat,
			SimpleDistanceStrategy charStrat, SimpleDistanceStrategy doubleStrat, SimpleDistanceStrategy intStrat, 
			SimpleDistanceStrategy stringStrat){
		setExampleDistanceFunction(exStrat);
		setCompositeDistanceFunction(compStrat);
		setSimpleDistanceFunction(charStrat, SimpleFeatureType.CHARACTER);
		setSimpleDistanceFunction(stringStrat, SimpleFeatureType.STRING);
		setSimpleDistanceFunction(intStrat, SimpleFeatureType.INTEGER);
		setSimpleDistanceFunction(doubleStrat, SimpleFeatureType.DOUBLE);
	}
	
	/** return the prediction accuracy tracking object */
	public PredictionError getPredictionError() {
		return predictionError;
	}
	
	/** update the accuracy of predictions with a new comparison */
	public double updateAccuracy(Object programPrediction, Object knownPrediction){
		return predictionError.updateAccuracy(programPrediction, knownPrediction);
	}
	
	/** return the position of the unknown field in a test example */
	public int getUnknownTestFieldPosition(){
		return testExamples.get(0).getUnknownFeaturePosition();
	}
	
	/**returns the collection of training examples*/
	public ArrayList<TrainingExample> getTrainingExamples() {
		return trainingExamples;
	}

	/**returns a specified training example at index n*/
	public TrainingExample getTrainingExample(int n) {
		if(n >= 0 && n < trainingExamples.size())
			return trainingExamples.get(n);
		return null;
	}

	/**set the training examples with a new collection of training examples*/
	public void setTrainingExamples(ArrayList<TrainingExample> trainingExamples) {
		this.trainingExamples = trainingExamples;
	}
	
	/**returns the collection of test examples*/
	public ArrayList<TestExample> getTestExamples() {
		return testExamples;
	}

	/**returns a specified test examples at index n*/
	public TestExample getTestExample(int n) {
		if(n >= 0 && n < testExamples.size())
			return testExamples.get(n);
		return null;
	}

	/**set the test examples with a new collection of  test examples*/
	public void setTestExamples(ArrayList<TestExample> testExamples) {
		this.testExamples = testExamples;
	}
	
	/**get the weightings for each feature*/
	public double[] getWeights() {
		return weights;
	}

	/**get a specified wweighting at index i*/
	public double getWeight(int i) {
		return weights[i];
	}

	/**set the weights with a new weight set*/
	public void setWeights(double[] weights) {
		this.weights = weights;
	}
	
	/**
	 * Returns the names of every field in the DataSet in an ArrayList
	 */
	public ArrayList<String> getFieldNames(){
		return fieldNames;
	}

	/**
	 * Returns the name of a field in the DataSet at a specified index
	 * 
	 * @param n the index value of the field name to get
	 * 
	 * @return the name of the specified field
	 */
	public String getFieldName(int n){
		if(n >= 0 && n < fieldNames.size())
			return fieldNames.get(n);
		return null;
	}

	/**
	 * Set the field names by passing a list of names
	 * 
	 * @param names an ArrayList containing strings which correspond to the name of each field
	 */
	public void setFieldNames(ArrayList<String> names){
		fieldNames = names;
	}
	
	/**returns the number of features in each example*/
	public int getNumberOfFields(){
		return numberOfFields;
	}

	/**sets the problem to havve examples with n attributes/exmaples*/
	public void setNumberOfAttributes(int n){
		numberOfFields = n;
	}

	/**returns the number of training examples*/
	public int getNumberOfTrainingExamples(){
		return trainingExamples.size();
	}

	/**returns the number of test examples*/
	public int getNumberOfTestExamples(){
		return testExamples.size();
	}
	
	/**remove training example at index n*/
	public void removeTrainingExample(int n){
		trainingExamples.remove(n);
	}

	/**remove test exmaple at index n*/
	public void removeTestExample(int n){
		testExamples.remove(n);
	}
	
	/**add a training example by passing an array of features*/
	public void addTrainingExample(Feature... dataElements){
		trainingExamples.add(new TrainingExample(new ArrayList<Feature>(Arrays.asList(dataElements))));
	}
	
	/**add a training example by passing an ArrayList of features*/
	public void addTrainingExample(ArrayList<Feature> dataElements){
		trainingExamples.add(new TrainingExample(dataElements));
	}
	
	/**edit a training example at index n in the collection*/
	public void editTrainingExample(int n, ArrayList<Feature> dataElements){
		trainingExamples.set(n, new TrainingExample(dataElements));
	}
	
	/**edit a test example at index n in the collection*/
	public void editTestExample(int n, ArrayList<Feature> dataElements){
		testExamples.set(n, new TestExample(dataElements));
	}

	/**add a test example by passing an array of features*/
	public void addTestExample(Feature... dataElements){
		testExamples.add(new TestExample(new ArrayList<Feature>(Arrays.asList(dataElements))));
	}

	/**add a test example by passing an ArrayList of features*/
	public void addTestExample(ArrayList<Feature> dataElements){
		testExamples.add(new TestExample(dataElements));
	}
	
	public ExampleDistanceStrategy getExampleCombinationStrategy() {
		return exampleCombinationStrategy;
	}

	public void setExampleCombinationStrategy(ExampleDistanceStrategy exampleCombinationStrategy) {
		this.exampleCombinationStrategy = exampleCombinationStrategy;
	}
	
	/**to string override*/
	@Override
	public String toString(){
		String s = "";

		s += "Training Exmaples:\n";
		s += trainingExamples.toString();

		s += "\n\nTest Exmaples:\n";
		s += testExamples.toString();

		s += "\n\nfieldNames:\n";
		for(int i = 0; i < fieldNames.size(); i++){
			s += fieldNames.get(i);
			if(i < fieldNames.size() - 1)
				s += ", ";
		}

		s += "\n\nweights:\n";
		for(int i = 0; i < weights.length; i++){
			s += weights[i];
			if(i < weights.length - 1)
				s += ", ";
		}

		return s;
	}
	
	public boolean equals(Problem anotherProblem){
		return trainingExamples.equals(anotherProblem.getTrainingExamples()) &&
				testExamples.equals(anotherProblem.getTestExamples()) &&
				fieldNames.equals(anotherProblem.getFieldNames()) &&
				weights.equals(anotherProblem.getWeights()) &&
				numberOfFields == anotherProblem.getNumberOfFields();
	}
	
	/**
	 * export problem set to file
	 * 
	 * @throws IOException
	 */
	public void serializedExport() throws IOException {
		serializedExport(FILENAMESERIALIZED);
	}
	
	/**
	 * export problem set to file at a specified path
	 * 
	 * @throws IOException
	 */
	public void serializedExport(String fieldName) throws IOException {
		FileOutputStream fileOut = null;
		try {
			fileOut = new FileOutputStream(fieldName);
		} catch (FileNotFoundException e1) {
			System.out.println("pathname not accessable");
			System.exit(0);
		}
		
		ObjectOutputStream out;
		out = new ObjectOutputStream(fileOut);
		
		out.writeObject(this);
		out.close();
		fileOut.close();
	}
	
	/**
	 * import serialized problem set
	 * 
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	public void serializedImport() throws IOException, ClassNotFoundException {
		serializedImport(FILENAMESERIALIZED);
	}
	
	/**
	 * import serialized problem set from a specified path
	 * 
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	public void serializedImport(String fileName) throws IOException, ClassNotFoundException {
		FileInputStream fileIn = null;
		try {
			fileIn = new FileInputStream(fileName);
		} catch (FileNotFoundException e1) {
			System.out.println("file not found");
			System.exit(0);
		}
		
		ObjectInputStream in = new ObjectInputStream(fileIn);
		
		Problem newProblem = (Problem)in.readObject();
		
		trainingExamples = newProblem.getTrainingExamples();
		testExamples = newProblem.getTestExamples();
		fieldNames = newProblem.getFieldNames();
		weights = newProblem.getWeights();
		predictionError = newProblem.getPredictionError();
		numberOfFields = newProblem.getNumberOfFields();
		
		in.close();
		fileIn.close();
	}

	/**
	 * updates the distance function used for all simple features of a given type within the data set
	 * 
	 * @param simpleDistanceStrategy the new distance function to use
	 * @param type the type of feature associated with the distance function
	 */
	public void setSimpleDistanceFunction(SimpleDistanceStrategy simpleDistanceStrategy, SimpleFeatureType type) {
		for(int i = 0; i < getNumberOfTrainingExamples(); i++){
			for(int j = 0; j < getNumberOfFields(); j++){
				if(getTrainingExample(i).getField(j) != null)
					getTrainingExample(i).getField(j).setDistanceFunction(simpleDistanceStrategy, type);
			}
		}for(int i = 0; i < getNumberOfTestExamples(); i++){
			for(int j = 0; j < getNumberOfFields(); j++){
				if(getTestExample(i).getField(j) != null)
					getTestExample(i).getField(j).setDistanceFunction(simpleDistanceStrategy, type);
			}
		}
	}
	
	/**
	 * updates the distance function used for all composite features of a given type within the data set
	 * 
	 * @param compositeDistanceStrategy the new distance function to use
	 */
	public void setCompositeDistanceFunction(CompositeDistanceStrategy compositeDistanceStrategy) {
		for(int i = 0; i < getNumberOfTrainingExamples(); i++){
			for(int j = 0; j < getNumberOfFields(); j++){
				if(getTrainingExample(i).getField(j) instanceof CompositeFeature)
					((CompositeFeature)getTrainingExample(i).getField(j)).setDistanceFunction(compositeDistanceStrategy);
			}
		}for(int i = 0; i < getNumberOfTestExamples(); i++){
			for(int j = 0; j < getNumberOfFields(); j++){
				if(getTestExample(i).getField(j) instanceof CompositeFeature)
					((CompositeFeature)getTestExample(i).getField(j)).setDistanceFunction(compositeDistanceStrategy);
			}
		}
	}
	
	/**
	 * updates the distance function used for all composite features of a given type within the data set
	 * 
	 * @param compositeDistanceStrategy the new distance function to use
	 */
	public void setExampleDistanceFunction(ExampleDistanceStrategy exampleDistanceStrategy) {
		this.exampleCombinationStrategy = exampleDistanceStrategy;
	}
}
